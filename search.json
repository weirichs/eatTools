[{"path":"https://weirichs.github.io/eatTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Weirich. Author, maintainer. Martin Hecht. Author. Karoline Sachse. Author. Benjamin Becker. Author. Nicole Mahler. Author. Edna Grewers. Contributor.","code":""},{"path":"https://weirichs.github.io/eatTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Weirich S, Hecht M, Sachse K, Becker B, Mahler N (2025). eatTools: Miscellaneous Functions Analysis Educational Assessments. R package version 0.7.8.9000, https://github.com/weirichs/eatTools.","code":"@Manual{,   title = {eatTools: Miscellaneous Functions for the Analysis of Educational Assessments},   author = {Sebastian Weirich and Martin Hecht and Karoline Sachse and Benjamin Becker and Nicole Mahler},   year = {2025},   note = {R package version 0.7.8.9000},   url = {https://github.com/weirichs/eatTools}, }"},{"path":"https://weirichs.github.io/eatTools/index.html","id":"eattools-","dir":"","previous_headings":"","what":"Miscellaneous Functions for the Analysis of Educational Assessments","title":"Miscellaneous Functions for the Analysis of Educational Assessments","text":"eatTools contains various functions required R packages eatModel, eatRep, eatPrep eatGADS. functions related data preparation, cleaning, descriptive analyses weighted statistics.","code":""},{"path":"https://weirichs.github.io/eatTools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Miscellaneous Functions for the Analysis of Educational Assessments","text":"","code":"# Install stable version from CRAN via install.packages(\"eatTools\")  # Install development version from GitHub via devtools::install_github(\"weirichs/eatTools\")"},{"path":"https://weirichs.github.io/eatTools/reference/addLeadingZeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading zeros to all columns that can be identified as integers in a character data.frame — addLeadingZerosToCharInt","title":"Add leading zeros to all columns that can be identified as integers in a character data.frame — addLeadingZerosToCharInt","text":"Adds leading zeros columns can identified integers data.frame consists character columns .","code":""},{"path":"https://weirichs.github.io/eatTools/reference/addLeadingZeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading zeros to all columns that can be identified as integers in a character data.frame — addLeadingZerosToCharInt","text":"","code":"addLeadingZerosToCharInt(dat)"},{"path":"https://weirichs.github.io/eatTools/reference/addLeadingZeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading zeros to all columns that can be identified as integers in a character data.frame — addLeadingZerosToCharInt","text":"dat data.frame consisting character columns ","code":""},{"path":"https://weirichs.github.io/eatTools/reference/addLeadingZeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading zeros to all columns that can be identified as integers in a character data.frame — addLeadingZerosToCharInt","text":"data.frame character columns dimensions input data.frame. column containing strings can converted integers, strings padded leading zeros values column number digits.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/addLeadingZeros.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add leading zeros to all columns that can be identified as integers in a character data.frame — addLeadingZerosToCharInt","text":"Karoline Sachse","code":""},{"path":"https://weirichs.github.io/eatTools/reference/addLeadingZeros.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading zeros to all columns that can be identified as integers in a character data.frame — addLeadingZerosToCharInt","text":"","code":"dat <- data.frame(v1 = c(\"0\",\"300\",\"e\",NA),                   v2=c(\"0\",\"90\",\"10000\",NA),                   v3=c(\"k\",\"kk\",\"kkk\",NA),                   v4=NA,                   v5=c(\"0\",\"90\",\"100\",\"1\")) dat <- set.col.type(dat) addLeadingZerosToCharInt(dat) #>     v1    v2   v3   v4  v5 #> 1    0 00000    k <NA> 000 #> 2  300 00090   kk <NA> 090 #> 3    e 10000  kkk <NA> 100 #> 4 <NA>  <NA> <NA> <NA> 001"},{"path":"https://weirichs.github.io/eatTools/reference/asNumericIfPossible.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Vector, Matrix or Data Frame Into Numeric Values If Possible — asNumericIfPossible","title":"Convert a Vector, Matrix or Data Frame Into Numeric Values If Possible — asNumericIfPossible","text":"function converts vectors matrices kinds numeric. function can also used convert columns data.frame class numeric conversion possible .e. without creating NA fails. Non-convertible columns maintained.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/asNumericIfPossible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Vector, Matrix or Data Frame Into Numeric Values If Possible — asNumericIfPossible","text":"","code":"asNumericIfPossible(x, maintain.factor.scores = TRUE, force.string = TRUE, transform.factors = TRUE, varName = NULL)"},{"path":"https://weirichs.github.io/eatTools/reference/asNumericIfPossible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Vector, Matrix or Data Frame Into Numeric Values If Possible — asNumericIfPossible","text":"x vector data frame converted. maintain.factor.scores Logical:         TRUE, conversion factor levels attempted         (like .numeric(.character(f))).         FALSE, internal codes factor returned         (like .numeric(f)).         See 'Details'. argument evaluated         transform.factors = TRUE. force.string Logical indicating whether columns force   numeric, even NAs induced.         FALSE, affected columns maintained.         TRUE, conversion forced. transform.factors Logical indicating whether columns class   factor converted.         FALSE, columns class factor maintained.         TRUE, conversion factors attempted. varName Optional: Name corresponding variable.   changed user.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/asNumericIfPossible.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a Vector, Matrix or Data Frame Into Numeric Values If Possible — asNumericIfPossible","text":"R, factors may represent ordered categories categorical variables. Depending meaning variable, conversion nominal values (factor variable) numeric values may desirable . arguments transform.factors maintain.factor.scores specify factor variables treated. See examples.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/asNumericIfPossible.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a Vector, Matrix or Data Frame Into Numeric Values If Possible — asNumericIfPossible","text":"Sebastian Weirich, Karoline Sachse, Benjamin Becker","code":""},{"path":"https://weirichs.github.io/eatTools/reference/asNumericIfPossible.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Vector, Matrix or Data Frame Into Numeric Values If Possible — asNumericIfPossible","text":"","code":"dat <- data.frame(X1 = c(\"1\",NA,\"0\"), X2 = c(\"a\",NA,\"b\"),                   X3 = c(TRUE,FALSE,FALSE), X4 = as.factor(c(\"a\",NA,\"b\")),                   X5 = as.factor(c(\"5\",\"6\",\"7\")), stringsAsFactors = FALSE) str(dat) #> 'data.frame':\t3 obs. of  5 variables: #>  $ X1: chr  \"1\" NA \"0\" #>  $ X2: chr  \"a\" NA \"b\" #>  $ X3: logi  TRUE FALSE FALSE #>  $ X4: Factor w/ 2 levels \"a\",\"b\": 1 NA 2 #>  $ X5: Factor w/ 3 levels \"5\",\"6\",\"7\": 1 2 3 asNumericIfPossible(dat) #> Warning: 'X2' has been coerced to numeric, NAs have been induced. #> Warning: 'X4' has been coerced to numeric, NAs have been induced. #>   X1 X2 X3 X4 X5 #> 1  1 NA  1 NA  5 #> 2 NA NA  0 NA  6 #> 3  0 NA  0 NA  7 asNumericIfPossible(dat, transform.factors=TRUE,                       maintain.factor.scores=FALSE) #> Warning: 'X2' has been coerced to numeric, NAs have been induced. #>   X1 X2 X3 X4 X5 #> 1  1 NA  1  1  1 #> 2 NA NA  0 NA  2 #> 3  0 NA  0  2  3 asNumericIfPossible(dat, transform.factors=TRUE,                       maintain.factor.scores=TRUE) #> Warning: 'X2' has been coerced to numeric, NAs have been induced. #> Warning: 'X4' has been coerced to numeric, NAs have been induced. #>   X1 X2 X3 X4 X5 #> 1  1 NA  1 NA  5 #> 2 NA NA  0 NA  6 #> 3  0 NA  0 NA  7"},{"path":"https://weirichs.github.io/eatTools/reference/catch_asNumericIfPossible.html","id":null,"dir":"Reference","previous_headings":"","what":"Use asNumericIfPossible with modified warning. — catch_asNumericIfPossible","title":"Use asNumericIfPossible with modified warning. — catch_asNumericIfPossible","text":"function uses asNumericIfPossible lets user change warning issued asNumericIfPossible. Suited use R packages.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/catch_asNumericIfPossible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use asNumericIfPossible with modified warning. — catch_asNumericIfPossible","text":"","code":"catch_asNumericIfPossible(x, warn, maintain.factor.scores = TRUE, force.string = TRUE, transform.factors = TRUE)"},{"path":"https://weirichs.github.io/eatTools/reference/catch_asNumericIfPossible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use asNumericIfPossible with modified warning. — catch_asNumericIfPossible","text":"x vector data frame converted. warn character vector length 1 desired warning. maintain.factor.scores Logical:         TRUE, conversion factor levels attempted         (like .numeric(.character(f))).         FALSE, internal codes factor returned         (like .numeric(f)).         See 'Details'. argument evaluated         transform.factors = TRUE. force.string Logical indicating whether columns force   numeric, even NAs induced.         FALSE, affected columns maintained.         TRUE, conversion forced. transform.factors Logical indicating whether columns class   factor converted.         FALSE, columns class factor maintained.         TRUE, conversion factors attempted.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/catch_asNumericIfPossible.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use asNumericIfPossible with modified warning. — catch_asNumericIfPossible","text":"details see asNumericIfPossible","code":""},{"path":"https://weirichs.github.io/eatTools/reference/catch_asNumericIfPossible.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use asNumericIfPossible with modified warning. — catch_asNumericIfPossible","text":"Benjamin Becker","code":""},{"path":"https://weirichs.github.io/eatTools/reference/catch_asNumericIfPossible.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use asNumericIfPossible with modified warning. — catch_asNumericIfPossible","text":"","code":"char <- c(\"a\", \"b\", 1) catch_asNumericIfPossible(x = char, warn = \"Vector could not be converted\") #> Warning: Vector could not be converted #> [1] NA NA  1"},{"path":"https://weirichs.github.io/eatTools/reference/cleanifyString.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes special characters — cleanifyString","title":"Removes special characters — cleanifyString","text":"Removes special characters character string. Also applicable factor variables data.frames.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/cleanifyString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes special characters — cleanifyString","text":"","code":"cleanifyString(x, removeNonAlphaNum = TRUE, replaceSpecialChars = TRUE,               oldEncoding = NULL, ...)"},{"path":"https://weirichs.github.io/eatTools/reference/cleanifyString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes special characters — cleanifyString","text":"x character variable, factor variable data.frame removeNonAlphaNum logical. TRUE, non-alphanumeric characters removed. Default TRUE. replaceSpecialChars logical. TRUE, special characters replaced. Default TRUE. oldEncoding character. encoding input data transformed \"UTF-8\". ... arguments passed methods.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/cleanifyString.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Removes special characters — cleanifyString","text":"unwanted characters removed character string factor variable, can lead change factor structure (according reference category, example). cleanifyString restores factor structure removing special characters. Function mainly used internally eatRep, eatGADS, eatModel packages.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/cleanifyString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes special characters — cleanifyString","text":"character variable, factor variable data.frame removed special characters","code":""},{"path":"https://weirichs.github.io/eatTools/reference/cleanifyString.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes special characters — cleanifyString","text":"","code":"fac1 <- factor(c(\"Tablet-Paper\", \"Computer.(Laptop)\", \"Computer.(Laptop)\"),                levels = c(\"Tablet-Paper\", \"Computer.(Laptop)\")) table(fac1) #> fac1 #>      Tablet-Paper Computer.(Laptop)  #>                 1                 2   # Remove special characters fac2 <- cleanifyString(fac1) fac2 #> [1] TabletPaper    ComputerLaptop ComputerLaptop #> Levels: TabletPaper ComputerLaptop"},{"path":"https://weirichs.github.io/eatTools/reference/contr.wec.weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates contrasts for a weighted factor variable based on weighted effect coding — contr.wec.weighted","title":"Calculates contrasts for a weighted factor variable based on weighted effect coding — contr.wec.weighted","text":"Function works equivalent contr.wec wec package, allows weighted contrasts.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/contr.wec.weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates contrasts for a weighted factor variable based on weighted effect coding — contr.wec.weighted","text":"","code":"contr.wec.weighted (x, omitted, weights)"},{"path":"https://weirichs.github.io/eatTools/reference/contr.wec.weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates contrasts for a weighted factor variable based on weighted effect coding — contr.wec.weighted","text":"x grouping variable class factor omitted Label factor label taken omitted category weights Numeric vector non-negative weights","code":""},{"path":"https://weirichs.github.io/eatTools/reference/contr.wec.weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates contrasts for a weighted factor variable based on weighted effect coding — contr.wec.weighted","text":"Returns contrast matrix based weighted effect coding.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/contr.wec.weighted.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates contrasts for a weighted factor variable based on weighted effect coding — contr.wec.weighted","text":"Sebastian Weirich, based upon contr.wec function wec package","code":""},{"path":"https://weirichs.github.io/eatTools/reference/contr.wec.weighted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates contrasts for a weighted factor variable based on weighted effect coding — contr.wec.weighted","text":"","code":"### exemplary data according to wec paper dat <- data.frame ( group = as.factor(c(rep(1,3), rep(2,2))), wgt = c(2/3, 4/3, 2, 3/8, 5/8)) ### default contrasts contrasts(dat[,\"group\"]) #>   2 #> 1 0 #> 2 1 ### weighted effect coding for weighted data contr.wec.weighted(x= dat[,\"group\"], omitted=1,weights=dat[,\"wgt\"]) #>       2 #> 1 -0.25 #> 2  1.00 ### equal to weighted effect coding: wec::contr.wec(x= dat[,\"group\"], omitted=1) contr.wec.weighted(x= dat[,\"group\"], omitted=1,weights=rep(1, nrow(dat))) #>            2 #> 1 -0.6666667 #> 2  1.0000000"},{"path":"https://weirichs.github.io/eatTools/reference/crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Trailing and Leading Characters From Character Strings — crop","title":"Remove Trailing and Leading Characters From Character Strings — crop","text":"Similarly function trim gdata package, function can used remove trailing leading spaces character strings. However, contrast trim, character can removed crop.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/crop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Trailing and Leading Characters From Character Strings — crop","text":"","code":"crop(x, char = \" \")"},{"path":"https://weirichs.github.io/eatTools/reference/crop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Trailing and Leading Characters From Character Strings — crop","text":"x character string char character removed beginning end x","code":""},{"path":"https://weirichs.github.io/eatTools/reference/crop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove Trailing and Leading Characters From Character Strings — crop","text":"Martin Hecht, Sebastian Weirich","code":""},{"path":"https://weirichs.github.io/eatTools/reference/crop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Trailing and Leading Characters From Character Strings — crop","text":"","code":"str <- c(\" 12  kk \", \"op j    q \", \"110\") crop(str) #> [1] \"12  kk\"    \"op j    q\" \"110\"       crop(str, \"op\") #> [1] \" 12  kk \" \" j    q \" \"110\""},{"path":"https://weirichs.github.io/eatTools/reference/descr.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive statistics for one or several variables — descr","title":"Descriptive statistics for one or several variables — descr","text":"Function computes descriptive statistics one variable several variables within data frame.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/descr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive statistics for one or several variables — descr","text":"","code":"descr (variable, na = NA, p.weights = NULL, na.rm = FALSE, verbose=TRUE)"},{"path":"https://weirichs.github.io/eatTools/reference/descr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive statistics for one or several variables — descr","text":"variable one variable data.frame several variables na optional values considered missing values p.weights optional: vector individual weights weighted statistics computed na.rm logical: missings removed prior estimation? verbose logical: Print messages console?","code":""},{"path":"https://weirichs.github.io/eatTools/reference/descr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Descriptive statistics for one or several variables — descr","text":"data frame following columns N number observations N.valid number non-missing observations Missing number missings Minimum minimum numeric variables Maximum maximum numeric variables Sum sum numeric variables Mean arithmetic mean numeric variables std.err standard error arithmetic mean. Note: weighted means, standard error estimated according Cochran (1977): \\(sigma_x^2=n/((n-1)*w_s^2)*Sigma(w_i^2*(x_i-x))\\). sig p value Median median numeric variables SD standard deviation numeric variables Var variance numeric variables","code":""},{"path":"https://weirichs.github.io/eatTools/reference/descr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Descriptive statistics for one or several variables — descr","text":"Cochran W. G. (1977). Sampling Techniques (3rd Edn). Wiley, New York","code":""},{"path":"https://weirichs.github.io/eatTools/reference/descr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Descriptive statistics for one or several variables — descr","text":"Sebastian Weirich","code":""},{"path":"https://weirichs.github.io/eatTools/reference/descr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descriptive statistics for one or several variables — descr","text":"","code":"data(mtcars) descr(mtcars) #>       N N.valid Missing Minimum Maximum      Sum       Mean     std.err #> mpg  32      32       0  10.400  33.900  642.900  20.090625  1.06542396 #> cyl  32      32       0   4.000   8.000  198.000   6.187500  0.31570933 #> disp 32      32       0  71.100 472.000 7383.100 230.721875 21.90947271 #> hp   32      32       0  52.000 335.000 4694.000 146.687500 12.12031731 #> drat 32      32       0   2.760   4.930  115.090   3.596563  0.09451874 #> wt   32      32       0   1.513   5.424  102.952   3.217250  0.17296847 #> qsec 32      32       0  14.500  22.900  571.160  17.848750  0.31588992 #> vs   32      32       0   0.000   1.000   14.000   0.437500  0.08909831 #> am   32      32       0   0.000   1.000   13.000   0.406250  0.08820997 #> gear 32      32       0   3.000   5.000  118.000   3.687500  0.13042656 #> carb 32      32       0   1.000   8.000   90.000   2.812500  0.28552971 #>               sig  Median          SD          Var #> mpg  1.526151e-18  19.200   6.0269481 3.632410e+01 #> cyl  5.048147e-19   6.000   1.7859216 3.189516e+00 #> disp 9.189065e-12 196.300 123.9386938 1.536080e+04 #> hp   2.794134e-13 123.000  68.5628685 4.700867e+03 #> drat 1.377586e-27   3.695   0.5346787 2.858814e-01 #> wt   2.257406e-18   3.325   0.9784574 9.573790e-01 #> qsec 7.790282e-33  17.710   1.7869432 3.193166e+00 #> vs   2.776961e-05   0.000   0.5040161 2.540323e-01 #> am   6.632258e-05   0.000   0.4989909 2.489919e-01 #> gear 1.066949e-23   4.000   0.7378041 5.443548e-01 #> carb 4.590930e-11   2.000   1.6152000 2.608871e+00"},{"path":"https://weirichs.github.io/eatTools/reference/do_call_rbind_withName.html","id":null,"dir":"Reference","previous_headings":"","what":"Row bind a list while assigning names to rows — do_call_rbind_withName","title":"Row bind a list while assigning names to rows — do_call_rbind_withName","text":"Use .call(rbind, ...) list data.frames creating new variable (colName) contains, example, original list naming (name).","code":""},{"path":"https://weirichs.github.io/eatTools/reference/do_call_rbind_withName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row bind a list while assigning names to rows — do_call_rbind_withName","text":"","code":"do_call_rbind_withName(df_list, name = names(df_list), colName)"},{"path":"https://weirichs.github.io/eatTools/reference/do_call_rbind_withName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row bind a list while assigning names to rows — do_call_rbind_withName","text":"df_list list data.frames. name Vector names fill colName. Default uses names df_list. colName single character; name new column.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/do_call_rbind_withName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row bind a list while assigning names to rows — do_call_rbind_withName","text":"Returns data.frame.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/do_call_rbind_withName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Row bind a list while assigning names to rows — do_call_rbind_withName","text":"Benjamin Becker","code":""},{"path":"https://weirichs.github.io/eatTools/reference/do_call_rbind_withName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row bind a list while assigning names to rows — do_call_rbind_withName","text":"","code":"### create example list df_list <- lapply(mtcars, function(x) {   data.frame(m = mean(x), sd = sd(x)) })  ### transform to a single data.frame do_call_rbind_withName(df_list, colName = \"variable\") #>    variable          m          sd #> 1       mpg  20.090625   6.0269481 #> 2       cyl   6.187500   1.7859216 #> 3      disp 230.721875 123.9386938 #> 4        hp 146.687500  68.5628685 #> 5      drat   3.596563   0.5346787 #> 6        wt   3.217250   0.9784574 #> 7      qsec  17.848750   1.7869432 #> 8        vs   0.437500   0.5040161 #> 9        am   0.406250   0.4989909 #> 10     gear   3.687500   0.7378041 #> 11     carb   2.812500   1.6152000"},{"path":"https://weirichs.github.io/eatTools/reference/eatTools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"eatTools: Miscellaneous Functions for the Analysis of Educational Assessments — eatTools-package","title":"eatTools: Miscellaneous Functions for the Analysis of Educational Assessments — eatTools-package","text":"eatTools package provides various groups functions. main groups functions include: transformation vector types, modification character variables, descriptive analyses weighted statistics. package's purpose mainly function lightweight dependency packages.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/eatTools-package.html","id":"transformation-of-vector-types","dir":"Reference","previous_headings":"","what":"Transformation of vector types","title":"eatTools: Miscellaneous Functions for the Analysis of Educational Assessments — eatTools-package","text":"functions asNumericIfPossible catch_asNumericIfPossible transform character factor variables numeric. facToChar transforms factor variables character. set.col.type allows manually setting type multiple variables within data.frame.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/eatTools-package.html","id":"modification-of-character-variables","dir":"Reference","previous_headings":"","what":"Modification of character variables","title":"eatTools: Miscellaneous Functions for the Analysis of Educational Assessments — eatTools-package","text":"Multiple convenience functions exist modification character variables: removing certain pattern (removePattern), removing numerics (removeNumeric) removing non numerics (removeNonNumeric), substituting multiple patterns within string (gsubAll) splitting strings multiple fixed number parts specific position (halveString)","code":""},{"path":"https://weirichs.github.io/eatTools/reference/eatTools-package.html","id":"descriptive-statistics","dir":"Reference","previous_headings":"","what":"Descriptive Statistics","title":"eatTools: Miscellaneous Functions for the Analysis of Educational Assessments — eatTools-package","text":"function descr provides simple descriptive statistics data.frame, format especially useful automated processing (long format data.frame).","code":""},{"path":"https://weirichs.github.io/eatTools/reference/eatTools-package.html","id":"weighted-statistics","dir":"Reference","previous_headings":"","what":"Weighted Statistics","title":"eatTools: Miscellaneous Functions for the Analysis of Educational Assessments — eatTools-package","text":"wtdVar provides calculation weighted variances (can done also package Hmisc, , however, high number dependencies). wtdTable provides weighted frequency table.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/existsBackgroundVariables.html","id":null,"dir":"Reference","previous_headings":"","what":"Internally needed function for consistency checks and data preparation. — existsBackgroundVariables","title":"Internally needed function for consistency checks and data preparation. — existsBackgroundVariables","text":"Function necessary eatRep eatModel well therefore exported namespace.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/existsBackgroundVariables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internally needed function for consistency checks and data preparation. — existsBackgroundVariables","text":"","code":"existsBackgroundVariables (dat, variable, warnIfMissing = FALSE,      stopIfMissingOnVars = NULL)"},{"path":"https://weirichs.github.io/eatTools/reference/existsBackgroundVariables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internally needed function for consistency checks and data preparation. — existsBackgroundVariables","text":"dat data frame variable column number variable name warnIfMissing Logical: gives warning variable contains missing values stopIfMissingOnVars Character vector variable names. variables, warnings raised warnIfMissing = TRUE turned errors.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/existsBackgroundVariables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internally needed function for consistency checks and data preparation. — existsBackgroundVariables","text":"structured list variable names","code":""},{"path":"https://weirichs.github.io/eatTools/reference/existsBackgroundVariables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internally needed function for consistency checks and data preparation. — existsBackgroundVariables","text":"","code":"data(mtcars) existsBackgroundVariables(mtcars, 2:4) #> [1] \"cyl\"  \"disp\" \"hp\""},{"path":"https://weirichs.github.io/eatTools/reference/facToChar.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform columns in a data frame — facToChar","title":"Transform columns in a data frame — facToChar","text":"Function transforms data frame columns specific class another class.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/facToChar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform columns in a data frame — facToChar","text":"","code":"facToChar ( dataFrame, from = \"factor\", to = \"character\")"},{"path":"https://weirichs.github.io/eatTools/reference/facToChar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform columns in a data frame — facToChar","text":"dataFrame data frame column class transformed? target column class","code":""},{"path":"https://weirichs.github.io/eatTools/reference/facToChar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform columns in a data frame — facToChar","text":"data frame","code":""},{"path":"https://weirichs.github.io/eatTools/reference/facToChar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform columns in a data frame — facToChar","text":"Sebastian Weirich","code":""},{"path":"https://weirichs.github.io/eatTools/reference/facToChar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform columns in a data frame — facToChar","text":"","code":"data(mtcars) ### original classes sapply(mtcars, class) #>       mpg       cyl      disp        hp      drat        wt      qsec        vs  #> \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\" \"numeric\"  #>        am      gear      carb  #> \"numeric\" \"numeric\" \"numeric\"  mtcars1 <- facToChar(mtcars, from = \"numeric\", to = \"character\") sapply(mtcars1, class) #>         mpg         cyl        disp          hp        drat          wt  #> \"character\" \"character\" \"character\" \"character\" \"character\" \"character\"  #>        qsec          vs          am        gear        carb  #> \"character\" \"character\" \"character\" \"character\" \"character\""},{"path":"https://weirichs.github.io/eatTools/reference/multiseq.html","id":null,"dir":"Reference","previous_headings":"","what":"multiple sequences — multiseq","title":"multiple sequences — multiseq","text":"creates sequence every unique value vector","code":""},{"path":"https://weirichs.github.io/eatTools/reference/multiseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multiple sequences — multiseq","text":"","code":"multiseq(v)"},{"path":"https://weirichs.github.io/eatTools/reference/multiseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multiple sequences — multiseq","text":"v vector","code":""},{"path":"https://weirichs.github.io/eatTools/reference/multiseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multiple sequences — multiseq","text":"vector multiple sequences","code":""},{"path":"https://weirichs.github.io/eatTools/reference/multiseq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"multiple sequences — multiseq","text":"Martin Hecht","code":""},{"path":"https://weirichs.github.io/eatTools/reference/multiseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multiple sequences — multiseq","text":"","code":"v <- c(\"a\", \"a\", \"a\", \"c\", \"b\", \"b\" , \"a\") multiseq(v) #> [1] 1 2 3 1 1 2 4"},{"path":"https://weirichs.github.io/eatTools/reference/operator.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Parts of an Object (list) — %$$%","title":"Extract Parts of an Object (list) — %$$%","text":"%$$% operator mainly used internally eatRep eatModel packages.   %$$% similar $, gives error instead   NULL corresponding element exists.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/operator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Parts of an Object (list) — %$$%","text":"","code":"x %$$% y"},{"path":"https://weirichs.github.io/eatTools/reference/operator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Parts of an Object (list) — %$$%","text":"x list y name corresponding element x","code":""},{"path":"https://weirichs.github.io/eatTools/reference/operator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Parts of an Object (list) — %$$%","text":"selected element list x","code":""},{"path":"https://weirichs.github.io/eatTools/reference/operator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Parts of an Object (list) — %$$%","text":"","code":"if (FALSE) { # \\dontrun{ x <- list(value1 = 14, value2 = NULL) x$value2                 # NULL x$value_not_defined      # NULL x%$$%value2            # NULL x%$$%value_not_defined # error } # }"},{"path":"https://weirichs.github.io/eatTools/reference/readMultisep.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in data.frames with separator characters >=1Byte — readMultisep","title":"Read in data.frames with separator characters >=1Byte — readMultisep","text":"Read character separated data.frames separator characters >=1Byte.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/readMultisep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in data.frames with separator characters >=1Byte — readMultisep","text":"","code":"readMultisep(file, sep, colnames=TRUE)"},{"path":"https://weirichs.github.io/eatTools/reference/readMultisep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in data.frames with separator characters >=1Byte — readMultisep","text":"file name file data read . sep field separator character(s). colnames logical. Whether first line file contains colnames.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/readMultisep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in data.frames with separator characters >=1Byte — readMultisep","text":"data frame containing representation data file.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/readMultisep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in data.frames with separator characters >=1Byte — readMultisep","text":"","code":"filePath <- tempfile(fileext = \".txt\") dat <- data.frame(v1 = c(\"0\",\"300\",\"e\",NA),                   v2=c(\"0\",\"90\",\"10000\",NA),                   v3=c(\"k\",\"kk\",\"kkk\",NA),                   v4=NA,                   v5=c(\"0\",\"90\",\"100\",\"1\")) write.table(dat, file = filePath, row.names = FALSE, col.names = FALSE, sep = \"]&;\") readMultisep(filePath, sep=\"]&;\") #>     X0  X0.1    k NA. X0.2 #> 1  300    90   kk  NA   90 #> 2    e 10000  kkk  NA  100 #> 3 <NA>    NA <NA>  NA    1"},{"path":"https://weirichs.github.io/eatTools/reference/removeNonNumeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes all non-numeric characters from a string. — removeNonNumeric","title":"Removes all non-numeric characters from a string. — removeNonNumeric","text":"Function removes non-numeric characters string.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removeNonNumeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes all non-numeric characters from a string. — removeNonNumeric","text":"","code":"removeNonNumeric ( string)"},{"path":"https://weirichs.github.io/eatTools/reference/removeNonNumeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes all non-numeric characters from a string. — removeNonNumeric","text":"string character vector","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removeNonNumeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes all non-numeric characters from a string. — removeNonNumeric","text":"character string","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removeNonNumeric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Removes all non-numeric characters from a string. — removeNonNumeric","text":"Sebastian Weirich","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removeNonNumeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes all non-numeric characters from a string. — removeNonNumeric","text":"","code":"str <- c(\".d1.nh.120\", \"empty\", \"110\", \".nh.dgd\", \"only.nh\") removeNonNumeric(str) #> [1] \"1120\" \"\"     \"110\"  \"\"     \"\""},{"path":"https://weirichs.github.io/eatTools/reference/removeNumeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes alphanumeric characters from a string. — removeNumeric","title":"Removes alphanumeric characters from a string. — removeNumeric","text":"Function removes alphanumeric characters string.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removeNumeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes alphanumeric characters from a string. — removeNumeric","text":"","code":"removeNumeric ( string)"},{"path":"https://weirichs.github.io/eatTools/reference/removeNumeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes alphanumeric characters from a string. — removeNumeric","text":"string character vector","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removeNumeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes alphanumeric characters from a string. — removeNumeric","text":"character string","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removeNumeric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Removes alphanumeric characters from a string. — removeNumeric","text":"Sebastian Weirich","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removeNumeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes alphanumeric characters from a string. — removeNumeric","text":"","code":"str <- c(\".d1.nh.120\", \"empty\", \"110\", \".nh.dgd\", \"only.nh\") removeNumeric(str) #> [1] \".d.nh.\"  \"empty\"   \"\"        \".nh.dgd\" \"only.nh\""},{"path":"https://weirichs.github.io/eatTools/reference/removePattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes a specified pattern from a string. — removePattern","title":"Removes a specified pattern from a string. — removePattern","text":"Function remove specified string character vector.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removePattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes a specified pattern from a string. — removePattern","text":"","code":"removePattern ( string, pattern)"},{"path":"https://weirichs.github.io/eatTools/reference/removePattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes a specified pattern from a string. — removePattern","text":"string character vector pattern character pattern length 1","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removePattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes a specified pattern from a string. — removePattern","text":"character string","code":""},{"path":"https://weirichs.github.io/eatTools/reference/removePattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes a specified pattern from a string. — removePattern","text":"","code":"str <- c(\".d1.nh.120\", \"empty\", \"110\", \".nh.dgd\", \"only.nh\") removePattern(str, \".nh.\") #> [1] \".d1120\"  \"empty\"   \"110\"     \"dgd\"     \"only.nh\""},{"path":"https://weirichs.github.io/eatTools/reference/roundDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a data.frame. — roundDF","title":"Round a data.frame. — roundDF","text":"Round numeric variables data.frame, leave variables untouched. Column row names preserved.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/roundDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a data.frame. — roundDF","text":"","code":"roundDF(dat, digits = 3)"},{"path":"https://weirichs.github.io/eatTools/reference/roundDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a data.frame. — roundDF","text":"dat data.frame. digits Integer indicating number decimal places.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/roundDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round a data.frame. — roundDF","text":"Returns rounded data.frame.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/roundDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round a data.frame. — roundDF","text":"","code":"roundDF(mtcars, digits = 0) #>                     mpg cyl disp  hp drat wt qsec vs am gear carb #> Mazda RX4            21   6  160 110    4  3   16  0  1    4    4 #> Mazda RX4 Wag        21   6  160 110    4  3   17  0  1    4    4 #> Datsun 710           23   4  108  93    4  2   19  1  1    4    1 #> Hornet 4 Drive       21   6  258 110    3  3   19  1  0    3    1 #> Hornet Sportabout    19   8  360 175    3  3   17  0  0    3    2 #> Valiant              18   6  225 105    3  3   20  1  0    3    1 #> Duster 360           14   8  360 245    3  4   16  0  0    3    4 #> Merc 240D            24   4  147  62    4  3   20  1  0    4    2 #> Merc 230             23   4  141  95    4  3   23  1  0    4    2 #> Merc 280             19   6  168 123    4  3   18  1  0    4    4 #> Merc 280C            18   6  168 123    4  3   19  1  0    4    4 #> Merc 450SE           16   8  276 180    3  4   17  0  0    3    3 #> Merc 450SL           17   8  276 180    3  4   18  0  0    3    3 #> Merc 450SLC          15   8  276 180    3  4   18  0  0    3    3 #> Cadillac Fleetwood   10   8  472 205    3  5   18  0  0    3    4 #> Lincoln Continental  10   8  460 215    3  5   18  0  0    3    4 #> Chrysler Imperial    15   8  440 230    3  5   17  0  0    3    4 #> Fiat 128             32   4   79  66    4  2   19  1  1    4    1 #> Honda Civic          30   4   76  52    5  2   19  1  1    4    2 #> Toyota Corolla       34   4   71  65    4  2   20  1  1    4    1 #> Toyota Corona        22   4  120  97    4  2   20  1  0    3    1 #> Dodge Challenger     16   8  318 150    3  4   17  0  0    3    2 #> AMC Javelin          15   8  304 150    3  3   17  0  0    3    2 #> Camaro Z28           13   8  350 245    4  4   15  0  0    3    4 #> Pontiac Firebird     19   8  400 175    3  4   17  0  0    3    2 #> Fiat X1-9            27   4   79  66    4  2   19  1  1    4    1 #> Porsche 914-2        26   4  120  91    4  2   17  0  1    5    2 #> Lotus Europa         30   4   95 113    4  2   17  1  1    5    2 #> Ford Pantera L       16   8  351 264    4  3   14  0  1    5    4 #> Ferrari Dino         20   6  145 175    4  3   16  0  1    5    6 #> Maserati Bora        15   8  301 335    4  4   15  0  1    5    8 #> Volvo 142E           21   4  121 109    4  3   19  1  1    4    2"},{"path":"https://weirichs.github.io/eatTools/reference/seq2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence generation — seq2","title":"Sequence generation — seq2","text":"Creates sequence integers. Modified version seq returning empty vector starting point larger end point. Originally provided rlang::seq2().","code":""},{"path":"https://weirichs.github.io/eatTools/reference/seq2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence generation — seq2","text":"","code":"seq2(from, to)"},{"path":"https://weirichs.github.io/eatTools/reference/seq2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence generation — seq2","text":"starting value sequence. length 1. end value sequence. length 1.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/seq2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence generation — seq2","text":"numerical sequence","code":""},{"path":"https://weirichs.github.io/eatTools/reference/seq2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence generation — seq2","text":"","code":"seq2(from = 1, to = 5) #> [1] 1 2 3 4 5"},{"path":"https://weirichs.github.io/eatTools/reference/set.col.type.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Class of Columns in a Data Frame — set.col.type","title":"Set the Class of Columns in a Data Frame — set.col.type","text":"function converts classes columns character, numeric, logical, integer factor.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/set.col.type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Class of Columns in a Data Frame — set.col.type","text":"","code":"set.col.type(dat, col.type = list(\"character\" = NULL), verbose = FALSE, ...)"},{"path":"https://weirichs.github.io/eatTools/reference/set.col.type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Class of Columns in a Data Frame — set.col.type","text":"dat data frame col.type named list column names converted. names list indicate class respective column converted (character, numeric, numeric..possible, logical, integer factor) verbose TRUE details converted columns printed console ... Additional arguments passed asNumericIfPossible","code":""},{"path":"https://weirichs.github.io/eatTools/reference/set.col.type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the Class of Columns in a Data Frame — set.col.type","text":"Use col.type=\"numeric..possible\" conversion numeric tested upfront, see asNumericIfPossible details.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/set.col.type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Class of Columns in a Data Frame — set.col.type","text":"data frame column classes changed according specifications col.type","code":""},{"path":"https://weirichs.github.io/eatTools/reference/set.col.type.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Class of Columns in a Data Frame — set.col.type","text":"Martin Hecht, Karoline Sachse","code":""},{"path":[]},{"path":"https://weirichs.github.io/eatTools/reference/set.col.type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the Class of Columns in a Data Frame — set.col.type","text":"","code":"str(d <- data.frame(\"var1\" = 1, \"var2\" = TRUE, \"var3\" = FALSE,     \"var4\" = as.factor(1), \"var5\" = as.factor(\"a\"),\"var6\" = \"b\",     stringsAsFactors = FALSE)) #> 'data.frame':\t1 obs. of  6 variables: #>  $ var1: num 1 #>  $ var2: logi TRUE #>  $ var3: logi FALSE #>  $ var4: Factor w/ 1 level \"1\": 1 #>  $ var5: Factor w/ 1 level \"a\": 1 #>  $ var6: chr \"b\"  str(set.col.type(d)) #> 'data.frame':\t1 obs. of  6 variables: #>  $ var1: chr \"1\" #>  $ var2: chr \"TRUE\" #>  $ var3: chr \"FALSE\" #>  $ var4: chr \"1\" #>  $ var5: chr \"a\" #>  $ var6: chr \"b\" str(set.col.type(d, list(\"numeric\" = NULL))) #> Warning: NAs introduced by coercion #> 'data.frame':\t1 obs. of  6 variables: #>  $ var1: num 1 #>  $ var2: num 1 #>  $ var3: num 0 #>  $ var4: num 1 #>  $ var5: num 1 #>  $ var6: num NA str(set.col.type(d, list(\"character\" = c(\"var1\" , \"var2\"),     \"numeric\" = \"var3\", \"logical\" = \"var4\"))) #> 'data.frame':\t1 obs. of  6 variables: #>  $ var1: chr \"1\" #>  $ var2: chr \"TRUE\" #>  $ var3: num 0 #>  $ var4: logi NA #>  $ var5: Factor w/ 1 level \"a\": 1 #>  $ var6: chr \"b\" str(set.col.type(d, list(\"numeric.if.possible\" = NULL))) #> Warning: Variable can not be transformed to numeric. Use force.string = TRUE to force this. #> Warning: Variable can not be transformed to numeric. Use force.string = TRUE to force this. #> Warning: Conversion of variable(s) var5, var6 to numeric.if.possible failed. #> 'data.frame':\t1 obs. of  6 variables: #>  $ var1: num 1 #>  $ var2: num 1 #>  $ var3: num 0 #>  $ var4: num 1 #>  $ var5: Factor w/ 1 level \"a\": 1 #>  $ var6: chr \"b\" str(set.col.type(d, list(\"numeric.if.possible\" = NULL),     transform.factors = TRUE)) #> Warning: Variable can not be transformed to numeric. Use force.string = TRUE to force this. #> Warning: Variable can not be transformed to numeric. Use force.string = TRUE to force this. #> Warning: Conversion of variable(s) var5, var6 to numeric.if.possible failed. #> 'data.frame':\t1 obs. of  6 variables: #>  $ var1: num 1 #>  $ var2: num 1 #>  $ var3: num 0 #>  $ var4: num 1 #>  $ var5: Factor w/ 1 level \"a\": 1 #>  $ var6: chr \"b\" str(set.col.type(d, list(\"numeric.if.possible\" = NULL), transform.factors = TRUE,     maintain.factor.scores = FALSE)) #> Warning: Variable can not be transformed to numeric. Use force.string = TRUE to force this. #> Warning: Conversion of variable(s) var6 to numeric.if.possible failed. #> 'data.frame':\t1 obs. of  6 variables: #>  $ var1: num 1 #>  $ var2: num 1 #>  $ var3: num 0 #>  $ var4: num 1 #>  $ var5: num 1 #>  $ var6: chr \"b\""},{"path":"https://weirichs.github.io/eatTools/reference/tablePattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates skeleton for frequency tables with desired values — tablePattern","title":"Creates skeleton for frequency tables with desired values — tablePattern","text":"Function takes values creates frequency table including values. Models behavior factor variables.","code":""},{"path":"https://weirichs.github.io/eatTools/reference/tablePattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates skeleton for frequency tables with desired values — tablePattern","text":"","code":"tablePattern (x, pattern = NULL, weights, na.rm = TRUE, useNA = c(\"no\", \"ifany\", \"always\"))"},{"path":"https://weirichs.github.io/eatTools/reference/tablePattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates skeleton for frequency tables with desired values — tablePattern","text":"x vector pattern desired values table output weights optional: weights na.rm missing values removed useNA whether include [NA] values table","code":""},{"path":"https://weirichs.github.io/eatTools/reference/tablePattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates skeleton for frequency tables with desired values — tablePattern","text":"frequency table","code":""},{"path":"https://weirichs.github.io/eatTools/reference/tablePattern.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates skeleton for frequency tables with desired values — tablePattern","text":"Sebastian Weirich","code":""},{"path":"https://weirichs.github.io/eatTools/reference/tablePattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates skeleton for frequency tables with desired values — tablePattern","text":"","code":"grades <- c(1,1,3,4,2,3,4,5,5,3,2,1) table(grades) #> grades #> 1 2 3 4 5  #> 3 2 3 2 2  tablePattern(grades, pattern = 1:6) #> y #> 1 2 3 4 5 6  #> 3 2 3 2 2 0"},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-078","dir":"Changelog","previous_headings":"","what":"eatTools 0.7.8","title":"eatTools 0.7.8","text":"CRAN release: 2024-12-18 new function cleanifyString() removes non-alphanumeric characters special characters string factor variable","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-077","dir":"Changelog","previous_headings":"","what":"eatTools 0.7.7","title":"eatTools 0.7.7","text":"CRAN release: 2024-10-11 minor bugfixes integers large addLeadingZerosToCharInt() (Previously error message displayed.) minor bugfixes messages mergeAttr() recodeLookup() return original vector user provide recode table (.e., argument NULL). (Previously error message displayed.) minor bugfixes display makeTria() messages can turned makeDataFrame() package sticker added bugfixes gsubAll(): longer allow using regular expressions (internally, gsub(..., fixed = TRUE) used). Function now begins longest string avoid repeated modifications strings “old” match . See function documentation details.","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-076","dir":"Changelog","previous_headings":"","what":"eatTools 0.7.6","title":"eatTools 0.7.6","text":"CRAN release: 2024-04-05 add argument checks using checkmate package bugfix halveString() splitting last instance regular expression new function rbind_fill_vector() allows rbind() unidimensional vectors unequal length, filling empty entries NA new operator %$$% works lists similar $ gives error instead NULL corresponding list element exist","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-075","dir":"Changelog","previous_headings":"","what":"eatTools 0.7.5","title":"eatTools 0.7.5","text":"CRAN release: 2023-11-23 internal fixes tests (removed language dependency) new function makeTria() internal use eatTools eatModel reshapes covariance/correlation matrices triangular shape added seq2() sequence generation adapt halveString() patterns 1 character add messages mergeAttr() combinations merge variables one data set occur data set add messages mergeAttr() two data.frames intended merge contain additional common variables (beyond -variables) makeDataFrame() gives warning/errors data.frame less rows expected least. existsBackgroundVariables() gives warning/errors variables missing values, depending critical missing values considered ","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-074","dir":"Changelog","previous_headings":"","what":"eatTools 0.7.4","title":"eatTools 0.7.4","text":"CRAN release: 2022-11-10 new function rbind_common() rbinds list data.frames selects common columns bug fix mergeAttr() variables one class mergeAttr() gives warning merging variables NAs optional colnames argument halveString() function","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-073","dir":"Changelog","previous_headings":"","what":"eatTools 0.7.3","title":"eatTools 0.7.3","text":"CRAN release: 2022-06-28 new function print_and_capture() mainly internal use eatRep eatCodebook packages allows easy integration (small) tables (error) messages added unit tests","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-072","dir":"Changelog","previous_headings":"","what":"eatTools 0.7.2","title":"eatTools 0.7.2","text":"CRAN release: 2022-05-05 new function makeDataFrame() internal use eatRep eatModel packages converts tibbles data.tables data.frame new function mergeAttr() mainly internal use eatRep eatModel packages restores attributes merging provides messages merging units unique partially matches new function pwc() computes part-whole-correlation item whole scale (except item)","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-071","dir":"Changelog","previous_headings":"","what":"eatTools 0.7.1","title":"eatTools 0.7.1","text":"CRAN release: 2021-11-10 new function roundDF() rounds numeric variables data.frame","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-070","dir":"Changelog","previous_headings":"","what":"eatTools 0.7.0","title":"eatTools 0.7.0","text":"CRAN release: 2021-08-11 new function na_omit_selection() drops rows containing missing values selected columns existsBackgroundVariables(): add optional warning variables contains missing values","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-060","dir":"Changelog","previous_headings":"","what":"eatTools 0.6.0","title":"eatTools 0.6.0","text":"CRAN release: 2021-07-06 new function readMultisep() reads data.frames separator characters >=1Byte new function addLeadingZerosToCharInt() adds leading zeros columns can identified integers character data.frame bug fix descr(). missing handling variable additional weights used bug fix tablePattern() additional weights used","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-050","dir":"Changelog","previous_headings":"","what":"eatTools 0.5.0","title":"eatTools 0.5.0","text":"CRAN release: 2021-02-09 new function recodeLookup() allows recoding variable based look table functionality wideToLong() extended Switch Github Action CI","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-040","dir":"Changelog","previous_headings":"","what":"eatTools 0.4.0","title":"eatTools 0.4.0","text":"CRAN release: 2021-01-25 new function do_call_rbind_withName() allows row binding list data.frames keeping list names bug fix wideToLong()","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-038","dir":"Changelog","previous_headings":"","what":"eatTools 0.3.8","title":"eatTools 0.3.8","text":"CRAN release: 2020-10-19 asNumericIfPossible() now works matrices","code":""},{"path":"https://weirichs.github.io/eatTools/news/index.html","id":"eattools-036","dir":"Changelog","previous_headings":"","what":"eatTools 0.3.6","title":"eatTools 0.3.6","text":"CRAN release: 2020-09-17 Initial CRAN release","code":""}]
